//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Team_Capture.Input
{
    public partial class @GameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Console"",
            ""id"": ""f3429d8d-a20d-46da-8941-3d1f3b19159d"",
            ""actions"": [
                {
                    ""name"": ""ToggleConsole"",
                    ""type"": ""Button"",
                    ""id"": ""81d8bfb3-06a9-484a-841b-9598944a1ecd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoComplete"",
                    ""type"": ""Button"",
                    ""id"": ""f172c47a-cba5-4b1c-b153-c802d6978817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HistoryUp"",
                    ""type"": ""Button"",
                    ""id"": ""d8d6bf72-842e-4440-b42a-10610510fad6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HistoryDown"",
                    ""type"": ""Button"",
                    ""id"": ""c798c230-b894-4124-9324-c637d5e4c894"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SubmitInput"",
                    ""type"": ""Button"",
                    ""id"": ""7ed22b2a-26cf-4580-bb4a-8ccfeb3e83ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3261766d-74ae-421f-be12-f893cc2ae8ed"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ToggleConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d33f864-3bad-4e60-908d-6a60dea8dc1f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AutoComplete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d15723b0-8349-4dc5-bb63-97be50dea492"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""HistoryUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2544f27d-8483-45f7-b4ae-dd29db35de1f"",
                    ""path"": ""<Keyboard>/pageUp"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""HistoryUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c5c4fab-3aeb-4850-a214-4e1778acc549"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""HistoryDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3960e645-6fbe-4e4c-b945-e5774dce1620"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""HistoryDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba755523-c1bf-449a-90bb-aad0fb5700a3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SubmitInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4092c7c-f047-4334-82b1-0f77701e7484"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SubmitInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuController"",
            ""id"": ""94878f43-56d2-4d25-8782-ef6ec623286e"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""44234032-4fd7-4286-b535-117fdff0b435"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0a2f3bd-8315-43f1-829e-5d3aa5a77adb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StartVideo"",
            ""id"": ""df7b0a06-e16a-4698-9061-0eea7267b829"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""185fe5c5-0670-418d-a606-5a318b4f0e90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67fa4ab2-92c0-401d-8bfd-bb7b4d44b290"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DebugMenu"",
            ""id"": ""8f2f2761-ee31-4e51-9ad0-f00b8ecd8957"",
            ""actions"": [
                {
                    ""name"": ""ToggleMenu"",
                    ""type"": ""Button"",
                    ""id"": ""768fde4b-d40c-4a39-b0d1-26a99d061ba8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a533ece7-fcbd-4674-9583-ee8f55fe00f0"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ToggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""b89642bb-b069-4676-83b4-13d73f3c5e0e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1f4c7b6f-6cf9-47bb-983f-df5e9759019b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f944ac8c-c24a-4713-bea7-0a4fb3a734c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScoreBoard"",
                    ""type"": ""Button"",
                    ""id"": ""4d2b60cd-4942-4793-a050-0566a553ee22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Suicide"",
                    ""type"": ""Button"",
                    ""id"": ""ee0ff9a6-6394-4556-bebb-1d8194490890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""fc490ca0-1fb5-4fb9-93e5-277f5e819682"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WeaponSelection"",
                    ""type"": ""Value"",
                    ""id"": ""75e6bbb3-9a28-4b13-a87a-9dc96932b16e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReloadWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""a98c354d-d84a-474b-8a41-9bb52f98d186"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""774017ef-43d3-4248-b042-b30dafb45737"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.01,behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e0868325-2507-4719-9a91-6b6340aa1ae0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""817b007a-bea4-4b74-91fe-6df681621973"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f0a6348-92f5-4c3b-96c3-4c0bc199dd3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e126bf7-12b7-4a0d-85f4-b820c1cd5466"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a0f59049-bc2c-4c71-942d-9bd62f5e81de"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""251fd00f-0cee-4e37-84f2-85c7ca5c43e7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b774095-6274-41a4-8044-108abfa35742"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ScoreBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4be1904a-5c3a-46d3-b1c9-b96fb6635215"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Suicide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d52655ad-ce66-4639-b662-66d6ca312418"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""872aef05-ccf2-40e0-99a3-ad826420a473"",
                    ""path"": ""<Mouse>/scroll/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""WeaponSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41ec4b0f-6c3b-42e7-af7e-44d219fc39b7"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""WeaponSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e270918e-fff2-43f2-8069-46d1a4bca491"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ReloadWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7713805d-7180-4087-9bd9-a1e1645ab8b3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ShootWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerUI"",
            ""id"": ""b94f1c9c-7612-4dd6-80a7-0aa1c3ac4252"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""95892649-bf90-439b-a07f-0100ba5f29c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bd40eb5-e302-4e2e-bb99-f0e5b68194eb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chat"",
            ""id"": ""828335d4-e438-4e3e-9ee0-6a40824abdff"",
            ""actions"": [
                {
                    ""name"": ""ToggleChat"",
                    ""type"": ""Button"",
                    ""id"": ""712ab24b-122c-40ac-83c0-fd17740c1cf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SubmitChat"",
                    ""type"": ""Button"",
                    ""id"": ""13b51f9c-919b-435e-9232-de2aafbdd6b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17370327-8418-4a37-9518-e7ffb21bf530"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ToggleChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62e8d72d-0f75-4e19-87c2-795e511daa16"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SubmitChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerDeathCam"",
            ""id"": ""93f268be-e27d-4637-a03b-d1c6e1462395"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""77c04bca-fa1f-47bd-83d7-74b12b39cbed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d359f78-62bb-48ba-a294-738ad70a6058"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Console
            m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
            m_Console_ToggleConsole = m_Console.FindAction("ToggleConsole", throwIfNotFound: true);
            m_Console_AutoComplete = m_Console.FindAction("AutoComplete", throwIfNotFound: true);
            m_Console_HistoryUp = m_Console.FindAction("HistoryUp", throwIfNotFound: true);
            m_Console_HistoryDown = m_Console.FindAction("HistoryDown", throwIfNotFound: true);
            m_Console_SubmitInput = m_Console.FindAction("SubmitInput", throwIfNotFound: true);
            // MenuController
            m_MenuController = asset.FindActionMap("MenuController", throwIfNotFound: true);
            m_MenuController_Close = m_MenuController.FindAction("Close", throwIfNotFound: true);
            // StartVideo
            m_StartVideo = asset.FindActionMap("StartVideo", throwIfNotFound: true);
            m_StartVideo_Skip = m_StartVideo.FindAction("Skip", throwIfNotFound: true);
            // DebugMenu
            m_DebugMenu = asset.FindActionMap("DebugMenu", throwIfNotFound: true);
            m_DebugMenu_ToggleMenu = m_DebugMenu.FindAction("ToggleMenu", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
            m_Player_ScoreBoard = m_Player.FindAction("ScoreBoard", throwIfNotFound: true);
            m_Player_Suicide = m_Player.FindAction("Suicide", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_WeaponSelection = m_Player.FindAction("WeaponSelection", throwIfNotFound: true);
            m_Player_ReloadWeapon = m_Player.FindAction("ReloadWeapon", throwIfNotFound: true);
            m_Player_ShootWeapon = m_Player.FindAction("ShootWeapon", throwIfNotFound: true);
            // PlayerUI
            m_PlayerUI = asset.FindActionMap("PlayerUI", throwIfNotFound: true);
            m_PlayerUI_Pause = m_PlayerUI.FindAction("Pause", throwIfNotFound: true);
            // Chat
            m_Chat = asset.FindActionMap("Chat", throwIfNotFound: true);
            m_Chat_ToggleChat = m_Chat.FindAction("ToggleChat", throwIfNotFound: true);
            m_Chat_SubmitChat = m_Chat.FindAction("SubmitChat", throwIfNotFound: true);
            // PlayerDeathCam
            m_PlayerDeathCam = asset.FindActionMap("PlayerDeathCam", throwIfNotFound: true);
            m_PlayerDeathCam_Look = m_PlayerDeathCam.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Console
        private readonly InputActionMap m_Console;
        private IConsoleActions m_ConsoleActionsCallbackInterface;
        private readonly InputAction m_Console_ToggleConsole;
        private readonly InputAction m_Console_AutoComplete;
        private readonly InputAction m_Console_HistoryUp;
        private readonly InputAction m_Console_HistoryDown;
        private readonly InputAction m_Console_SubmitInput;
        public struct ConsoleActions
        {
            private @GameInput m_Wrapper;
            public ConsoleActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleConsole => m_Wrapper.m_Console_ToggleConsole;
            public InputAction @AutoComplete => m_Wrapper.m_Console_AutoComplete;
            public InputAction @HistoryUp => m_Wrapper.m_Console_HistoryUp;
            public InputAction @HistoryDown => m_Wrapper.m_Console_HistoryDown;
            public InputAction @SubmitInput => m_Wrapper.m_Console_SubmitInput;
            public InputActionMap Get() { return m_Wrapper.m_Console; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
            public void SetCallbacks(IConsoleActions instance)
            {
                if (m_Wrapper.m_ConsoleActionsCallbackInterface != null)
                {
                    @ToggleConsole.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnToggleConsole;
                    @ToggleConsole.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnToggleConsole;
                    @ToggleConsole.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnToggleConsole;
                    @AutoComplete.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnAutoComplete;
                    @AutoComplete.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnAutoComplete;
                    @AutoComplete.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnAutoComplete;
                    @HistoryUp.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryUp;
                    @HistoryUp.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryUp;
                    @HistoryUp.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryUp;
                    @HistoryDown.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryDown;
                    @HistoryDown.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryDown;
                    @HistoryDown.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnHistoryDown;
                    @SubmitInput.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmitInput;
                    @SubmitInput.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmitInput;
                    @SubmitInput.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmitInput;
                }
                m_Wrapper.m_ConsoleActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleConsole.started += instance.OnToggleConsole;
                    @ToggleConsole.performed += instance.OnToggleConsole;
                    @ToggleConsole.canceled += instance.OnToggleConsole;
                    @AutoComplete.started += instance.OnAutoComplete;
                    @AutoComplete.performed += instance.OnAutoComplete;
                    @AutoComplete.canceled += instance.OnAutoComplete;
                    @HistoryUp.started += instance.OnHistoryUp;
                    @HistoryUp.performed += instance.OnHistoryUp;
                    @HistoryUp.canceled += instance.OnHistoryUp;
                    @HistoryDown.started += instance.OnHistoryDown;
                    @HistoryDown.performed += instance.OnHistoryDown;
                    @HistoryDown.canceled += instance.OnHistoryDown;
                    @SubmitInput.started += instance.OnSubmitInput;
                    @SubmitInput.performed += instance.OnSubmitInput;
                    @SubmitInput.canceled += instance.OnSubmitInput;
                }
            }
        }
        public ConsoleActions @Console => new ConsoleActions(this);

        // MenuController
        private readonly InputActionMap m_MenuController;
        private IMenuControllerActions m_MenuControllerActionsCallbackInterface;
        private readonly InputAction m_MenuController_Close;
        public struct MenuControllerActions
        {
            private @GameInput m_Wrapper;
            public MenuControllerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Close => m_Wrapper.m_MenuController_Close;
            public InputActionMap Get() { return m_Wrapper.m_MenuController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuControllerActions set) { return set.Get(); }
            public void SetCallbacks(IMenuControllerActions instance)
            {
                if (m_Wrapper.m_MenuControllerActionsCallbackInterface != null)
                {
                    @Close.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnClose;
                    @Close.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnClose;
                    @Close.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnClose;
                }
                m_Wrapper.m_MenuControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Close.started += instance.OnClose;
                    @Close.performed += instance.OnClose;
                    @Close.canceled += instance.OnClose;
                }
            }
        }
        public MenuControllerActions @MenuController => new MenuControllerActions(this);

        // StartVideo
        private readonly InputActionMap m_StartVideo;
        private IStartVideoActions m_StartVideoActionsCallbackInterface;
        private readonly InputAction m_StartVideo_Skip;
        public struct StartVideoActions
        {
            private @GameInput m_Wrapper;
            public StartVideoActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Skip => m_Wrapper.m_StartVideo_Skip;
            public InputActionMap Get() { return m_Wrapper.m_StartVideo; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StartVideoActions set) { return set.Get(); }
            public void SetCallbacks(IStartVideoActions instance)
            {
                if (m_Wrapper.m_StartVideoActionsCallbackInterface != null)
                {
                    @Skip.started -= m_Wrapper.m_StartVideoActionsCallbackInterface.OnSkip;
                    @Skip.performed -= m_Wrapper.m_StartVideoActionsCallbackInterface.OnSkip;
                    @Skip.canceled -= m_Wrapper.m_StartVideoActionsCallbackInterface.OnSkip;
                }
                m_Wrapper.m_StartVideoActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Skip.started += instance.OnSkip;
                    @Skip.performed += instance.OnSkip;
                    @Skip.canceled += instance.OnSkip;
                }
            }
        }
        public StartVideoActions @StartVideo => new StartVideoActions(this);

        // DebugMenu
        private readonly InputActionMap m_DebugMenu;
        private IDebugMenuActions m_DebugMenuActionsCallbackInterface;
        private readonly InputAction m_DebugMenu_ToggleMenu;
        public struct DebugMenuActions
        {
            private @GameInput m_Wrapper;
            public DebugMenuActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleMenu => m_Wrapper.m_DebugMenu_ToggleMenu;
            public InputActionMap Get() { return m_Wrapper.m_DebugMenu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DebugMenuActions set) { return set.Get(); }
            public void SetCallbacks(IDebugMenuActions instance)
            {
                if (m_Wrapper.m_DebugMenuActionsCallbackInterface != null)
                {
                    @ToggleMenu.started -= m_Wrapper.m_DebugMenuActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.performed -= m_Wrapper.m_DebugMenuActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.canceled -= m_Wrapper.m_DebugMenuActionsCallbackInterface.OnToggleMenu;
                }
                m_Wrapper.m_DebugMenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleMenu.started += instance.OnToggleMenu;
                    @ToggleMenu.performed += instance.OnToggleMenu;
                    @ToggleMenu.canceled += instance.OnToggleMenu;
                }
            }
        }
        public DebugMenuActions @DebugMenu => new DebugMenuActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Look;
        private readonly InputAction m_Player_ScoreBoard;
        private readonly InputAction m_Player_Suicide;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_WeaponSelection;
        private readonly InputAction m_Player_ReloadWeapon;
        private readonly InputAction m_Player_ShootWeapon;
        public struct PlayerActions
        {
            private @GameInput m_Wrapper;
            public PlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Look => m_Wrapper.m_Player_Look;
            public InputAction @ScoreBoard => m_Wrapper.m_Player_ScoreBoard;
            public InputAction @Suicide => m_Wrapper.m_Player_Suicide;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @WeaponSelection => m_Wrapper.m_Player_WeaponSelection;
            public InputAction @ReloadWeapon => m_Wrapper.m_Player_ReloadWeapon;
            public InputAction @ShootWeapon => m_Wrapper.m_Player_ShootWeapon;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                    @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @ScoreBoard.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoreBoard;
                    @ScoreBoard.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoreBoard;
                    @ScoreBoard.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoreBoard;
                    @Suicide.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSuicide;
                    @Suicide.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSuicide;
                    @Suicide.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSuicide;
                    @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @WeaponSelection.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection;
                    @WeaponSelection.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection;
                    @WeaponSelection.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection;
                    @ReloadWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadWeapon;
                    @ReloadWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadWeapon;
                    @ReloadWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadWeapon;
                    @ShootWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootWeapon;
                    @ShootWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootWeapon;
                    @ShootWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShootWeapon;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @ScoreBoard.started += instance.OnScoreBoard;
                    @ScoreBoard.performed += instance.OnScoreBoard;
                    @ScoreBoard.canceled += instance.OnScoreBoard;
                    @Suicide.started += instance.OnSuicide;
                    @Suicide.performed += instance.OnSuicide;
                    @Suicide.canceled += instance.OnSuicide;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @WeaponSelection.started += instance.OnWeaponSelection;
                    @WeaponSelection.performed += instance.OnWeaponSelection;
                    @WeaponSelection.canceled += instance.OnWeaponSelection;
                    @ReloadWeapon.started += instance.OnReloadWeapon;
                    @ReloadWeapon.performed += instance.OnReloadWeapon;
                    @ReloadWeapon.canceled += instance.OnReloadWeapon;
                    @ShootWeapon.started += instance.OnShootWeapon;
                    @ShootWeapon.performed += instance.OnShootWeapon;
                    @ShootWeapon.canceled += instance.OnShootWeapon;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // PlayerUI
        private readonly InputActionMap m_PlayerUI;
        private IPlayerUIActions m_PlayerUIActionsCallbackInterface;
        private readonly InputAction m_PlayerUI_Pause;
        public struct PlayerUIActions
        {
            private @GameInput m_Wrapper;
            public PlayerUIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_PlayerUI_Pause;
            public InputActionMap Get() { return m_Wrapper.m_PlayerUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerUIActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerUIActions instance)
            {
                if (m_Wrapper.m_PlayerUIActionsCallbackInterface != null)
                {
                    @Pause.started -= m_Wrapper.m_PlayerUIActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_PlayerUIActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_PlayerUIActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_PlayerUIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public PlayerUIActions @PlayerUI => new PlayerUIActions(this);

        // Chat
        private readonly InputActionMap m_Chat;
        private IChatActions m_ChatActionsCallbackInterface;
        private readonly InputAction m_Chat_ToggleChat;
        private readonly InputAction m_Chat_SubmitChat;
        public struct ChatActions
        {
            private @GameInput m_Wrapper;
            public ChatActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleChat => m_Wrapper.m_Chat_ToggleChat;
            public InputAction @SubmitChat => m_Wrapper.m_Chat_SubmitChat;
            public InputActionMap Get() { return m_Wrapper.m_Chat; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ChatActions set) { return set.Get(); }
            public void SetCallbacks(IChatActions instance)
            {
                if (m_Wrapper.m_ChatActionsCallbackInterface != null)
                {
                    @ToggleChat.started -= m_Wrapper.m_ChatActionsCallbackInterface.OnToggleChat;
                    @ToggleChat.performed -= m_Wrapper.m_ChatActionsCallbackInterface.OnToggleChat;
                    @ToggleChat.canceled -= m_Wrapper.m_ChatActionsCallbackInterface.OnToggleChat;
                    @SubmitChat.started -= m_Wrapper.m_ChatActionsCallbackInterface.OnSubmitChat;
                    @SubmitChat.performed -= m_Wrapper.m_ChatActionsCallbackInterface.OnSubmitChat;
                    @SubmitChat.canceled -= m_Wrapper.m_ChatActionsCallbackInterface.OnSubmitChat;
                }
                m_Wrapper.m_ChatActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleChat.started += instance.OnToggleChat;
                    @ToggleChat.performed += instance.OnToggleChat;
                    @ToggleChat.canceled += instance.OnToggleChat;
                    @SubmitChat.started += instance.OnSubmitChat;
                    @SubmitChat.performed += instance.OnSubmitChat;
                    @SubmitChat.canceled += instance.OnSubmitChat;
                }
            }
        }
        public ChatActions @Chat => new ChatActions(this);

        // PlayerDeathCam
        private readonly InputActionMap m_PlayerDeathCam;
        private IPlayerDeathCamActions m_PlayerDeathCamActionsCallbackInterface;
        private readonly InputAction m_PlayerDeathCam_Look;
        public struct PlayerDeathCamActions
        {
            private @GameInput m_Wrapper;
            public PlayerDeathCamActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_PlayerDeathCam_Look;
            public InputActionMap Get() { return m_Wrapper.m_PlayerDeathCam; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerDeathCamActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerDeathCamActions instance)
            {
                if (m_Wrapper.m_PlayerDeathCamActionsCallbackInterface != null)
                {
                    @Look.started -= m_Wrapper.m_PlayerDeathCamActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerDeathCamActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerDeathCamActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_PlayerDeathCamActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public PlayerDeathCamActions @PlayerDeathCam => new PlayerDeathCamActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IConsoleActions
        {
            void OnToggleConsole(InputAction.CallbackContext context);
            void OnAutoComplete(InputAction.CallbackContext context);
            void OnHistoryUp(InputAction.CallbackContext context);
            void OnHistoryDown(InputAction.CallbackContext context);
            void OnSubmitInput(InputAction.CallbackContext context);
        }
        public interface IMenuControllerActions
        {
            void OnClose(InputAction.CallbackContext context);
        }
        public interface IStartVideoActions
        {
            void OnSkip(InputAction.CallbackContext context);
        }
        public interface IDebugMenuActions
        {
            void OnToggleMenu(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnScoreBoard(InputAction.CallbackContext context);
            void OnSuicide(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnWeaponSelection(InputAction.CallbackContext context);
            void OnReloadWeapon(InputAction.CallbackContext context);
            void OnShootWeapon(InputAction.CallbackContext context);
        }
        public interface IPlayerUIActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IChatActions
        {
            void OnToggleChat(InputAction.CallbackContext context);
            void OnSubmitChat(InputAction.CallbackContext context);
        }
        public interface IPlayerDeathCamActions
        {
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
